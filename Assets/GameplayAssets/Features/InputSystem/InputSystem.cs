//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GameplayAssets/Features/InputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""GameplayPC"",
            ""id"": ""be3a3e9f-4f46-457d-8195-036e5e70158f"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""afcb5b3f-c2e1-4d85-88fb-48bbc96c3db7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a0c863e9-ab50-4564-a6b7-bfaf879902b8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""68b85f72-e17c-4362-9a62-3cdcb1f3db4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""KeyboardWASD"",
                    ""id"": ""5811b51b-3dea-4042-94bd-0a93d441aa97"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7e61bc7a-fb90-4fbd-b132-c52478921c70"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""23953233-a1ba-453a-80c3-48ed2819cc05"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""42eaecb4-6c65-4964-8472-c0493c062ed1"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b9bb797a-7410-4232-938b-220f180fbe86"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""KeyboardArrows"",
                    ""id"": ""82c49465-fd06-46f6-a345-aff78946c0f6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0a34fc01-8f7e-476d-809f-b4075d48489c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""433d9adf-052a-4e68-93f8-8cbf2b73d808"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""796647ac-2d41-45a0-a9ad-0fa152670ba6"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a1e1a702-d9ca-4353-aae6-630e123721a9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0c47c9d1-73e5-4bfd-87fa-c571c0047773"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8b9f20f-804f-4fca-a0cb-a89f15ad8e03"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayPC
        m_GameplayPC = asset.FindActionMap("GameplayPC", throwIfNotFound: true);
        m_GameplayPC_Movement = m_GameplayPC.FindAction("Movement", throwIfNotFound: true);
        m_GameplayPC_Rotate = m_GameplayPC.FindAction("Rotate", throwIfNotFound: true);
        m_GameplayPC_LeftButtonPressed = m_GameplayPC.FindAction("LeftButtonPressed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayPC
    private readonly InputActionMap m_GameplayPC;
    private List<IGameplayPCActions> m_GameplayPCActionsCallbackInterfaces = new List<IGameplayPCActions>();
    private readonly InputAction m_GameplayPC_Movement;
    private readonly InputAction m_GameplayPC_Rotate;
    private readonly InputAction m_GameplayPC_LeftButtonPressed;
    public struct GameplayPCActions
    {
        private @InputSystem m_Wrapper;
        public GameplayPCActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GameplayPC_Movement;
        public InputAction @Rotate => m_Wrapper.m_GameplayPC_Rotate;
        public InputAction @LeftButtonPressed => m_Wrapper.m_GameplayPC_LeftButtonPressed;
        public InputActionMap Get() { return m_Wrapper.m_GameplayPC; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayPCActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayPCActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayPCActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayPCActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @LeftButtonPressed.started += instance.OnLeftButtonPressed;
            @LeftButtonPressed.performed += instance.OnLeftButtonPressed;
            @LeftButtonPressed.canceled += instance.OnLeftButtonPressed;
        }

        private void UnregisterCallbacks(IGameplayPCActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @LeftButtonPressed.started -= instance.OnLeftButtonPressed;
            @LeftButtonPressed.performed -= instance.OnLeftButtonPressed;
            @LeftButtonPressed.canceled -= instance.OnLeftButtonPressed;
        }

        public void RemoveCallbacks(IGameplayPCActions instance)
        {
            if (m_Wrapper.m_GameplayPCActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayPCActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayPCActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayPCActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayPCActions @GameplayPC => new GameplayPCActions(this);
    public interface IGameplayPCActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnLeftButtonPressed(InputAction.CallbackContext context);
    }
}
